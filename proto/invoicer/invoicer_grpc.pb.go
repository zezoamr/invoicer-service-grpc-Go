// go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
// go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest
// protoc --go_out=invoicer --go_opt=paths=source_relative --go-grpc_out=invoicer --go-grpc_opt=paths=source_relative invoicer.proto

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: invoicer.proto

package invoicer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Invoicer_SendVoiceMail_FullMethodName      = "/Invoicer/SendVoiceMail"
	Invoicer_ReadUnSeenReceived_FullMethodName = "/Invoicer/ReadUnSeenReceived"
	Invoicer_ReadAllReceived_FullMethodName    = "/Invoicer/ReadAllReceived"
	Invoicer_ReadAllSent_FullMethodName        = "/Invoicer/ReadAllSent"
	Invoicer_MarkAsSeen_FullMethodName         = "/Invoicer/MarkAsSeen"
	Invoicer_ReadMessageTime_FullMethodName    = "/Invoicer/ReadMessageTime"
)

// InvoicerClient is the client API for Invoicer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InvoicerClient interface {
	SendVoiceMail(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*SendRequestStatus, error)
	ReadUnSeenReceived(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*MultipleinvoiceReply, error)
	ReadAllReceived(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (Invoicer_ReadAllReceivedClient, error)
	ReadAllSent(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (Invoicer_ReadAllSentClient, error)
	MarkAsSeen(ctx context.Context, opts ...grpc.CallOption) (Invoicer_MarkAsSeenClient, error)
	ReadMessageTime(ctx context.Context, opts ...grpc.CallOption) (Invoicer_ReadMessageTimeClient, error)
}

type invoicerClient struct {
	cc grpc.ClientConnInterface
}

func NewInvoicerClient(cc grpc.ClientConnInterface) InvoicerClient {
	return &invoicerClient{cc}
}

func (c *invoicerClient) SendVoiceMail(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*SendRequestStatus, error) {
	out := new(SendRequestStatus)
	err := c.cc.Invoke(ctx, Invoicer_SendVoiceMail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invoicerClient) ReadUnSeenReceived(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*MultipleinvoiceReply, error) {
	out := new(MultipleinvoiceReply)
	err := c.cc.Invoke(ctx, Invoicer_ReadUnSeenReceived_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invoicerClient) ReadAllReceived(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (Invoicer_ReadAllReceivedClient, error) {
	stream, err := c.cc.NewStream(ctx, &Invoicer_ServiceDesc.Streams[0], Invoicer_ReadAllReceived_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &invoicerReadAllReceivedClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Invoicer_ReadAllReceivedClient interface {
	Recv() (*InvoiceReply, error)
	grpc.ClientStream
}

type invoicerReadAllReceivedClient struct {
	grpc.ClientStream
}

func (x *invoicerReadAllReceivedClient) Recv() (*InvoiceReply, error) {
	m := new(InvoiceReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *invoicerClient) ReadAllSent(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (Invoicer_ReadAllSentClient, error) {
	stream, err := c.cc.NewStream(ctx, &Invoicer_ServiceDesc.Streams[1], Invoicer_ReadAllSent_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &invoicerReadAllSentClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Invoicer_ReadAllSentClient interface {
	Recv() (*InvoiceReply, error)
	grpc.ClientStream
}

type invoicerReadAllSentClient struct {
	grpc.ClientStream
}

func (x *invoicerReadAllSentClient) Recv() (*InvoiceReply, error) {
	m := new(InvoiceReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *invoicerClient) MarkAsSeen(ctx context.Context, opts ...grpc.CallOption) (Invoicer_MarkAsSeenClient, error) {
	stream, err := c.cc.NewStream(ctx, &Invoicer_ServiceDesc.Streams[2], Invoicer_MarkAsSeen_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &invoicerMarkAsSeenClient{stream}
	return x, nil
}

type Invoicer_MarkAsSeenClient interface {
	Send(*MarkRequest) error
	Recv() (*MarkRequestStatus, error)
	grpc.ClientStream
}

type invoicerMarkAsSeenClient struct {
	grpc.ClientStream
}

func (x *invoicerMarkAsSeenClient) Send(m *MarkRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *invoicerMarkAsSeenClient) Recv() (*MarkRequestStatus, error) {
	m := new(MarkRequestStatus)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *invoicerClient) ReadMessageTime(ctx context.Context, opts ...grpc.CallOption) (Invoicer_ReadMessageTimeClient, error) {
	stream, err := c.cc.NewStream(ctx, &Invoicer_ServiceDesc.Streams[3], Invoicer_ReadMessageTime_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &invoicerReadMessageTimeClient{stream}
	return x, nil
}

type Invoicer_ReadMessageTimeClient interface {
	Send(*ReadMessageTimeRequest) error
	Recv() (*ReadMessageTimeResponse, error)
	grpc.ClientStream
}

type invoicerReadMessageTimeClient struct {
	grpc.ClientStream
}

func (x *invoicerReadMessageTimeClient) Send(m *ReadMessageTimeRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *invoicerReadMessageTimeClient) Recv() (*ReadMessageTimeResponse, error) {
	m := new(ReadMessageTimeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// InvoicerServer is the server API for Invoicer service.
// All implementations must embed UnimplementedInvoicerServer
// for forward compatibility
type InvoicerServer interface {
	SendVoiceMail(context.Context, *CreateRequest) (*SendRequestStatus, error)
	ReadUnSeenReceived(context.Context, *ReadRequest) (*MultipleinvoiceReply, error)
	ReadAllReceived(*ReadRequest, Invoicer_ReadAllReceivedServer) error
	ReadAllSent(*ReadRequest, Invoicer_ReadAllSentServer) error
	MarkAsSeen(Invoicer_MarkAsSeenServer) error
	ReadMessageTime(Invoicer_ReadMessageTimeServer) error
	mustEmbedUnimplementedInvoicerServer()
}

// UnimplementedInvoicerServer must be embedded to have forward compatible implementations.
type UnimplementedInvoicerServer struct {
}

func (UnimplementedInvoicerServer) SendVoiceMail(context.Context, *CreateRequest) (*SendRequestStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendVoiceMail not implemented")
}
func (UnimplementedInvoicerServer) ReadUnSeenReceived(context.Context, *ReadRequest) (*MultipleinvoiceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadUnSeenReceived not implemented")
}
func (UnimplementedInvoicerServer) ReadAllReceived(*ReadRequest, Invoicer_ReadAllReceivedServer) error {
	return status.Errorf(codes.Unimplemented, "method ReadAllReceived not implemented")
}
func (UnimplementedInvoicerServer) ReadAllSent(*ReadRequest, Invoicer_ReadAllSentServer) error {
	return status.Errorf(codes.Unimplemented, "method ReadAllSent not implemented")
}
func (UnimplementedInvoicerServer) MarkAsSeen(Invoicer_MarkAsSeenServer) error {
	return status.Errorf(codes.Unimplemented, "method MarkAsSeen not implemented")
}
func (UnimplementedInvoicerServer) ReadMessageTime(Invoicer_ReadMessageTimeServer) error {
	return status.Errorf(codes.Unimplemented, "method ReadMessageTime not implemented")
}
func (UnimplementedInvoicerServer) mustEmbedUnimplementedInvoicerServer() {}

// UnsafeInvoicerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InvoicerServer will
// result in compilation errors.
type UnsafeInvoicerServer interface {
	mustEmbedUnimplementedInvoicerServer()
}

func RegisterInvoicerServer(s grpc.ServiceRegistrar, srv InvoicerServer) {
	s.RegisterService(&Invoicer_ServiceDesc, srv)
}

func _Invoicer_SendVoiceMail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoicerServer).SendVoiceMail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Invoicer_SendVoiceMail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoicerServer).SendVoiceMail(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Invoicer_ReadUnSeenReceived_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoicerServer).ReadUnSeenReceived(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Invoicer_ReadUnSeenReceived_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoicerServer).ReadUnSeenReceived(ctx, req.(*ReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Invoicer_ReadAllReceived_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReadRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(InvoicerServer).ReadAllReceived(m, &invoicerReadAllReceivedServer{stream})
}

type Invoicer_ReadAllReceivedServer interface {
	Send(*InvoiceReply) error
	grpc.ServerStream
}

type invoicerReadAllReceivedServer struct {
	grpc.ServerStream
}

func (x *invoicerReadAllReceivedServer) Send(m *InvoiceReply) error {
	return x.ServerStream.SendMsg(m)
}

func _Invoicer_ReadAllSent_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReadRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(InvoicerServer).ReadAllSent(m, &invoicerReadAllSentServer{stream})
}

type Invoicer_ReadAllSentServer interface {
	Send(*InvoiceReply) error
	grpc.ServerStream
}

type invoicerReadAllSentServer struct {
	grpc.ServerStream
}

func (x *invoicerReadAllSentServer) Send(m *InvoiceReply) error {
	return x.ServerStream.SendMsg(m)
}

func _Invoicer_MarkAsSeen_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(InvoicerServer).MarkAsSeen(&invoicerMarkAsSeenServer{stream})
}

type Invoicer_MarkAsSeenServer interface {
	Send(*MarkRequestStatus) error
	Recv() (*MarkRequest, error)
	grpc.ServerStream
}

type invoicerMarkAsSeenServer struct {
	grpc.ServerStream
}

func (x *invoicerMarkAsSeenServer) Send(m *MarkRequestStatus) error {
	return x.ServerStream.SendMsg(m)
}

func (x *invoicerMarkAsSeenServer) Recv() (*MarkRequest, error) {
	m := new(MarkRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Invoicer_ReadMessageTime_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(InvoicerServer).ReadMessageTime(&invoicerReadMessageTimeServer{stream})
}

type Invoicer_ReadMessageTimeServer interface {
	Send(*ReadMessageTimeResponse) error
	Recv() (*ReadMessageTimeRequest, error)
	grpc.ServerStream
}

type invoicerReadMessageTimeServer struct {
	grpc.ServerStream
}

func (x *invoicerReadMessageTimeServer) Send(m *ReadMessageTimeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *invoicerReadMessageTimeServer) Recv() (*ReadMessageTimeRequest, error) {
	m := new(ReadMessageTimeRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Invoicer_ServiceDesc is the grpc.ServiceDesc for Invoicer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Invoicer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Invoicer",
	HandlerType: (*InvoicerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendVoiceMail",
			Handler:    _Invoicer_SendVoiceMail_Handler,
		},
		{
			MethodName: "ReadUnSeenReceived",
			Handler:    _Invoicer_ReadUnSeenReceived_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReadAllReceived",
			Handler:       _Invoicer_ReadAllReceived_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ReadAllSent",
			Handler:       _Invoicer_ReadAllSent_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "MarkAsSeen",
			Handler:       _Invoicer_MarkAsSeen_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ReadMessageTime",
			Handler:       _Invoicer_ReadMessageTime_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "invoicer.proto",
}
